/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;



import entidades.Usuario;
import excepciones.PersistenciaException;
import implementaciones.DAOsFactory;
import interfaces.IUsuariosDAO;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;



/**
 *
 * @author Hugo Rivera
 */
public class UsuariosForm extends javax.swing.JFrame {

   
    private IUsuariosDAO usuariosDAO;
    
    public UsuariosForm() {
        initComponents();
        this.txtIdUsuario.setEditable(false);
        this.usuariosDAO=DAOsFactory.crearUsuariosDAO();
        this.txtNombre.setDocument(new LimitJTextField(100));
        this.txtTelefono.setDocument(new LimitJTextField(12));
        llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtIdUsuario = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsuarios = new javax.swing.JTable();
        txtTelefono = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Administrador de Especies");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("idUsuario");

        jLabel2.setText("Nombre");

        jLabel3.setText("Telefono");

        txtIdUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdUsuarioActionPerformed(evt);
            }
        });

        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        tblUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IdUsuario", "Nombre", "Telefono"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblUsuarios);

        txtTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtIdUsuario, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNombre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(txtTelefono, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(btnGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelar)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtIdUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(101, 101, 101)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGuardar)
                            .addComponent(btnCancelar))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnEditar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEliminar))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void guardar(){
        if(this.txtIdUsuario.getText().isEmpty()){
            this.agregar();
        }else{
            this.actualizar();
        }
    }
    
    private void agregar(){
        //Se validan los campos antes de agregarse
        if(validarCampos()){
            try {
                String nombre =this.txtNombre.getText();
                String telefono=this.txtTelefono.getText();
                
                Usuario usuario=new Usuario(nombre, telefono);
                
                this.usuariosDAO.agregar(usuario);
               
                    JOptionPane.showMessageDialog(this,"Se agrego un nuevo usuario",
                            "Informacion", JOptionPane.INFORMATION_MESSAGE );
                    limpiarFormulario();
                    this.llenarTabla();
              
                    
                   } catch (PersistenciaException ex) {
                Logger.getLogger(UsuariosForm.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "No fue posible agregar un nuevo usuario",
                            "Informacion", JOptionPane.ERROR_MESSAGE);
            }
        }
        
    
    }
    
    private void actualizar(){
        //Se validan los campos  
        
            try {
                if(validarCampos()){
                Long id_usuario=Long.parseLong(this.txtIdUsuario.getText());
                String nombre =this.txtNombre.getText();
                String telefono=this.txtTelefono.getText();
                Usuario usuario=new Usuario(id_usuario,nombre, telefono);
                
                
                this.usuariosDAO.actualizar(usuario);
                
                    JOptionPane.showMessageDialog(this,"Se actualizo el usuario",
                            "Informacion", JOptionPane.INFORMATION_MESSAGE );
                    limpiarFormulario();
                    this.llenarTabla();
                }
                    
                   } catch (PersistenciaException ex) {
                Logger.getLogger(UsuariosForm.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "No fue posible actualizar el usuario",
                            "Informacion", JOptionPane.ERROR_MESSAGE);
            }
        }
        
    
    
    private boolean validarCampos() {

        StringBuffer mensaje = new StringBuffer();

        if (txtNombre.getText().isEmpty()) {
            mensaje.append("Nombre vacio\n");
        }
        
        if (txtTelefono.getText().isEmpty()) {
            mensaje.append("Telefono vacio\n");
        }

        if (mensaje.length() == 0) {
            return true;
        }
        JOptionPane.showMessageDialog(this, mensaje, "Información invalida", JOptionPane.INFORMATION_MESSAGE);
        return false;
        
      }
    
    private void editar(){
        try {
            Long idUsuarioSeleccionado=this.getIdUsuarioSeleccionado();
            if(idUsuarioSeleccionado==-1){
                JOptionPane.showMessageDialog(this,"Debes seleccionar un usuario",
                        "Informacion",JOptionPane.WARNING_MESSAGE);
                return;
            }
            Usuario usuario=this.usuariosDAO.consultar(idUsuarioSeleccionado);
            if(usuario!=null){
                llenarFormulario(usuario);
            }
        } catch (PersistenciaException ex) {
            Logger.getLogger(UsuariosForm.class.getName()).log(Level.SEVERE, null, ex);
        }
     }
    private void eliminar(){
        Long idUsuarioSeleccionado=getIdUsuarioSeleccionado();
        if(idUsuarioSeleccionado!=-1){
            try {
                int opcionSeleccionada=JOptionPane.showConfirmDialog(this, "¿Esta "
                        + "seguro de eliminar a el usuario?","Confirmacion",JOptionPane.YES_NO_OPTION);
                if(opcionSeleccionada!=JOptionPane.NO_OPTION){
                   usuariosDAO.eliminar(idUsuarioSeleccionado);
                    JOptionPane.showMessageDialog(this, "Se elimino a el usuario seleccionado",
                            "Informacion", JOptionPane.INFORMATION_MESSAGE);
                    this.llenarTabla();
                    this.limpiarFormulario();
                }
                   
                
            } catch (PersistenciaException ex) {
                Logger.getLogger(UsuariosForm.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showConfirmDialog(this, "No fue posible eliminar a el usuario",
                            "Informacion", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(this, "Debes seleccionar un usuario", 
                    "Informacion", JOptionPane.WARNING_MESSAGE);
        
        }     
    }
    
    
    private Long getIdUsuarioSeleccionado(){
        int indiceFilaSeleccionada=this.tblUsuarios.getSelectedRow();
        if(indiceFilaSeleccionada!=-1){
            DefaultTableModel modeloTabla =(DefaultTableModel)tblUsuarios.getModel();
            int indiceColumnaId=0;
            Long idUsuarioSeleccionado=(Long)modeloTabla.getValueAt(indiceFilaSeleccionada, indiceColumnaId);
            return idUsuarioSeleccionado;
        }else{
            return -1L;
        }
    }
    
    private void llenarTabla(){
        try {
            List<Usuario> listaUsuarios=this.usuariosDAO.consultarTodos();
            DefaultTableModel modeloTabla =(DefaultTableModel)this.tblUsuarios.getModel();
            modeloTabla.setRowCount(0);
            listaUsuarios.forEach(usuario->{
                Object[] fila=new Object[3];
                fila[0]=usuario.getId();
                fila[1]=usuario.getNombre();
                fila[2]=usuario.getTelefono();
               
                modeloTabla.addRow(fila);
            });
        } catch (PersistenciaException ex) {
            Logger.getLogger(UsuariosForm.class.getName()).log(Level.SEVERE, null, ex);
        }
         
    }
    
    private void llenarFormulario(Usuario usuario){
         this.txtIdUsuario.setText(Long.toString(usuario.getId()));
         this.txtNombre.setText(usuario.getNombre());
         this.txtTelefono.setText(usuario.getTelefono());
         
         
     }
    
    private void limpiarFormulario(){
        this.txtIdUsuario.setText("");
        this.txtNombre.setText("");
        this.txtTelefono.setText("");
        
    }
    
   class LimitJTextField extends PlainDocument 
   {
   private int max;
   LimitJTextField(int max) {
      super();
      this.max = max;
   }
   public void insertString(int offset, String text, AttributeSet attr) throws BadLocationException {
      if (text == null)
         return;
      if ((getLength() + text.length()) <= max) {
         super.insertString(offset, text, attr);
      }
     }
    }
    private void txtIdUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdUsuarioActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:
        this.editar();
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        this.eliminar();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.limpiarFormulario();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        this.guardar();
        limpiarFormulario();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        // TODO add your handling code here:
        if(!Character.isLetter(evt.getKeyChar())&&!Character.isSpaceChar(evt.getKeyChar())){
            evt.consume();
        }
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoKeyTyped
        // TODO add your handling code here:
        if(!Character.isDigit(evt.getKeyChar())){
            evt.consume();
        }
    }//GEN-LAST:event_txtTelefonoKeyTyped

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
//        Menu menu = new Menu();
//        menu.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblUsuarios;
    private javax.swing.JTextField txtIdUsuario;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}

